spring:
  web:
    resources:
      # 🚫 關閉預設 /static、/public 等靜態路徑
      add-mappings: false

  cloud:
    consul:
      discovery:
        healthCheckUrl: http://api-gateway:${server.port}/actuator/health
        ip-address: ${SERVICE_IP:${spring.cloud.client.ip-address}} # IP 地址，優先使用外部傳入的環境變數

    gateway:
      default-filters:
        - StripPrefix=1 # 移除路徑中的第一層前綴
      routes:
        # 授權伺服器路由
        - id: authn-service
          uri: lb://authn-service # 通過負載均衡器指向 `authn-service`
          predicates:
            - Path=/authn/** # 匹配以 /authn/ 開頭的請求路徑
          filters:
            - RedirectUriValidationFilter # 自定義過濾器，用於檢查 `redirect_uri` 是否合法

        # 授權檢查服務路由
        - id: authz-service
          uri: lb://authz-service # 負載均衡到 `authz-service`
          predicates:
            - Path=/authz/** # 匹配 /authz/ 開頭的請求

        # 權限處理服務路由
        - id: authp-service
          uri: lb://authp-service # 負載均衡到 `authp-service`
          predicates:
            - Path=/authp/** # 匹配 /authp/ 開頭的請求

        # 黑名單服務路由
        - id: blacklist-service
          uri: lb://blacklist-service # 負載均衡到 `blacklist-service`
          predicates:
            - Path=/blacklist/** # 匹配 /blacklist/ 開頭的請求

        # 待辦事項服務路由
        - id: todo-service
          uri: lb://todo-service
          predicates:
            - Path=/todo/**

        # BizForm 服務路由
        - id: VitalBizFormService
          uri: lb://VitalBizFormService # 負載均衡到 `bizform-service`
          predicates:
            - Path=/bizform/** # 匹配 /bizform/ 開頭的請求
          filters:
            - CacheRequestBody=String

        # Genogram 服務路由（家系圖）
        - id: GenogramService
          uri: lb://GenogramService # 負載均衡到 `genogram-service`
          predicates:
            - Path=/genogram/** # 匹配 /genogram/ 開頭的請求

        # Mail 服務路由
        - id: MailService
          uri: lb://MailService # 負載均衡到 `mail-service`
          predicates:
            - Path=/mail/** # 匹配 /mail/ 開頭的請求

  data:
    redis:
      host: ${REDIS_HOST:auth_redis} # Redis 主機地址，支持外部環境變數配置
      port: ${REDIS_PORT:6379}      # Redis 默認端口
      password: ${REDIS_PASSWORD:}  # Redis 密碼，留空表示無密碼
      timeout: 5s  # 設定連線超時為 5 秒
      lettuce:
        pool:
          max-active: 50      # 最大連接數
          max-idle: 15        # 最大空閒連接數
          min-idle: 5         # 最小空閒連接數
          max-wait: 2000ms    # 最大等待時間

jwt:
  issuer: ${JWT_ISSUER_URI:${spring.cloud.client.ip-address}:8080/authn} # JWT 簽發者的 URI
  jwk-set-uri: ${JWT_JWK_SET_URI:http://${spring.cloud.client.ip-address}:8080/authn/jwks/publicKey} # JWK 公鑰的 URI
  signature-algorithm: ES256 # 使用 EC（橢圓曲線）簽名算法
  time-skew:
    seconds: 60 # 時間偏移，允許 JWT 驗證時容忍的時差
  valid:
    audiences: ${JWT_VALID_AUDIENCES:${spring.cloud.client.ip-address}} # JWT 的受眾驗證

springdoc:
  swagger-ui:
    enabled: false       # 關閉 Swagger UI 頁面（/swagger-ui.html），避免在生產環境暴露 API 文件
  api-docs:
    enabled: false       # 關閉 OpenAPI JSON 文件（/v3/api-docs），防止 API schema 外洩

app:
  security:
    # ------------------------------------------------------------
    # public-paths : 完全匿名路徑，Spring Security 與 InternalTokenFilter 均不處理。
    #                ➜ 無需攜帶 JWT，即可直接存取。
    #                ➜ 僅適用於「無登入需求」的靜態資源、健康檢查、公共元資料等。
    #                ⚠️ 若與安全相關，請勿放入此區。
    # ------------------------------------------------------------
    public-paths:
      # ---------- 🌐 靜態資源（前端預設請求） ----------
      - "/public/**"              # DEV - 開發時用的前端靜態資源（JS / CSS / img 等）
      - "/static/**"              # DEV - Spring Boot 傳統 static 目錄（若使用）
      - "/favicon.ico"            # ALL - 瀏覽器預設請求網站 icon

      # ---------- 🔍 健康檢查與監控 ----------
      - "/actuator/health"        # OPS - 系統健康狀態（供 LB / K8s 探活用）
      - "/actuator/prometheus"    # OPS - Prometheus 指標暴露端點（若有啟用監控）

      # ---------- 🔑 JWT / OIDC 公開協定端點 ----------
      - "/authn/.well-known/**"   # OIDC Discovery metadata
      - "/authn/jwks/publicKey"   # JWT 驗簽所需的 JWK 公鑰
      - "/authn/oauth/login"      # OAuth2 授權登入起點（供前端導向）
      - "/authn/oauth/callback"   # OAuth2 授權碼回調端點
      - "/oauth2/authorization/**" # Spring Security OAuth2 核心端點（自動註冊）

      # ---------- 📄 Swagger / OpenAPI 開發用文件 ----------
      - "/swagger-ui.html"        # Swagger UI 首頁（HTML）
      - "/swagger-ui/**"          # Swagger UI 前端靜態資源（JS / CSS）
      - "/v3/api-docs/**"         # OpenAPI 格式的後端文件 JSON
      - "/webjars/**"             # Swagger 相關依賴（JS / CSS 套件）
      - "/bizform/**"             # BIZFORM - 嵌入式表單或 iframe 顯示內容（若非全開放建議自行控權）

# 指定使用 log4j2-logstash.xml 作為 logging 設定檔，啟用 Logstash 輸出
logging:
  config: classpath:log4j2-logstash.xml

test:
  depot-id: ee197c49e2e9449c8b48874a45a1611d