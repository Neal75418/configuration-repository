server:
  port: 8080 # 微服務端口，用於本地開發和測試

spring:
  web:
    resources:
      add-mappings: false

  cloud:
    consul:
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
        health-check-path: /actuator/health
        instance-id: ${spring.application.name}-${server.port}

    gateway:
      default-filters:
        - StripPrefix=1 # 移除路徑中的第一層前綴
      routes:
        # 前端首頁路由到 Next.js
        - id: frontend-homepage
          uri: http://localhost:3000 # Next.js 的開發服務器地址
          predicates:
            - Path=/ # 根路徑
          filters:
            - RewritePath=/, / # 重寫根路徑，讓請求轉發到 Next.js 的正確路徑

        # 授權伺服器路由
        - id: authn-service
          uri: lb://authn-service # 通過負載均衡器指向 `authn-service`
          predicates:
            - Path=/authn/** # 匹配以 /authn/ 開頭的請求路徑
          filters:
            - RedirectUriValidationFilter # 自定義過濾器，用於檢查 `redirect_uri` 是否合法

        # 授權檢查服務路由
        - id: authz-service
          uri: lb://authz-service # 負載均衡到 `authz-service`
          predicates:
            - Path=/authz/** # 匹配 /authz/ 開頭的請求

        # 權限處理服務路由
        - id: authp-service
          uri: lb://authp-service # 負載均衡到 `authp-service`
          predicates:
            - Path=/authp/** # 匹配 /authp/ 開頭的請求

        # 黑名單服務路由
        - id: blacklist-service
          uri: lb://blacklist-service # 負載均衡到 `blacklist-service`
          predicates:
            - Path=/blacklist/** # 匹配 /blacklist/ 開頭的請求

        # 待辦事項服務路由
        - id: todo-service
          uri: lb://todo-service
          predicates:
            - Path=/todo/**

        # BizForm 服務路由
        - id: VitalBizFormService
          uri: lb://VitalBizFormService # 負載均衡到 `bizform-service`
          predicates:
            - Path=/bizform/** # 匹配 /bizform/ 開頭的請求

  cache:
    caffeine:
      spec: initialCapacity=100,maximumSize=500,expireAfterWrite=10m # 緩存初始化容量為 100，最大容量為 500，寫入後 10 分鐘過期

  data:
    redis:
      host: ${REDIS_HOST:localhost} # Redis 主機地址，支持外部環境變數配置
      port: ${REDIS_PORT:6379}      # Redis 默認端口
      password: ${REDIS_PASSWORD:}  # Redis 密碼，留空表示無密碼
      lettuce:
        pool:
          max-active: 50      # 最大連接數
          max-idle: 15        # 最大空閒連接數
          min-idle: 5         # 最小空閒連接數
          max-wait: 2000ms    # 最大等待時間

auth:
  service:
    base-url: ${AUTH_SERVICE_BASE_URL:lb://authn-service} # 動態配置授權服務 URL

blacklist:
  service:
    # 黑名單服務的名稱
    # 這個名稱應與服務註冊中心（如 Eureka、Consul 或 Kubernetes）中定義的服務名稱一致
    name: blacklist-service

    # 黑名單檢查的 API 路徑
    # 該路徑會附加到黑名單服務的基礎 URL，例如：http://blacklist-service/blacklist/check
    check-path: /blacklist/check

    # 請求黑名單服務的超時時間（以秒為單位）
    # 當超過該時間沒有響應時，請求將被視為失敗
    timeout: 5

app:
  security:
    redirect-validation-paths:
      - "/authn/oauth" # OAuth 驗證的跳轉路徑
    allowed-redirect-uris:
      - "http://localhost:8080/authn/oauth/callback" # 後端的回調地址
      - "http://localhost:8080/oauth/callback"       # 後端的回調地址
      - "http://localhost:8080/authn/jwks/publicKey" # JWK 公鑰地址
      - "http://localhost:8080/jwks/publicKey"       # 公鑰地址
      - "http://localhost:3000/"                    # 前端的跳轉地址
  public-paths:
    - "/favicon.ico"
    - "/actuator/health"
    - "/actuator/prometheus"
    - "/public/**"
    - "/static/**"
    - "/authn/jwks/publicKey"
    - "/jwks/publicKey"
    - "/.well-known/**"
    - "/authn/.well-known/**"
    - "/oauth2/authorization/**"
    - "/authn/oauth/login"
    - "/authn/oauth/callback"
    - "/oauth/login"
    - "/oauth/callback"
    - "/authorize"
    - "/token"

cors:
  allowed-origins:
    - "http://localhost:3000" # 允許前端開發時的跨域訪問
    - "http://localhost:8080" # 本地後端的跨域訪問
    - "https://member.vikosmos.com" # 測試環境的前端域名
  allowed-methods:
    - "GET"
    - "POST"
    - "OPTIONS"
  allowed-headers:
    - "Authorization"
    - "Content-Type"