server:
  address: 0.0.0.0
  port: 8080 # 微服務端口，用於本地開發和測試

spring:
  web:
    resources:
      add-mappings: false

  cloud:
    consul:
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
        instance-id: ${spring.application.name}-${server.port}

    gateway:
      default-filters:
        - StripPrefix=1 # 移除路徑中的第一層前綴
      routes:
        # 授權伺服器路由
        - id: authn-service
          uri: lb://authn-service # 通過負載均衡器指向 `authn-service`
          predicates:
            - Path=/authn/** # 匹配以 /authn/ 開頭的請求路徑
          filters:
            - RedirectUriValidationFilter # 自定義過濾器，用於檢查 `redirect_uri` 是否合法

        # 授權檢查服務路由
        - id: authz-service
          uri: lb://authz-service # 負載均衡到 `authz-service`
          predicates:
            - Path=/authz/** # 匹配 /authz/ 開頭的請求

        # 權限處理服務路由
        - id: authp-service
          uri: lb://authp-service # 負載均衡到 `authp-service`
          predicates:
            - Path=/authp/** # 匹配 /authp/ 開頭的請求

        # 黑名單服務路由
        - id: blacklist-service
          uri: lb://blacklist-service # 負載均衡到 `blacklist-service`
          predicates:
            - Path=/blacklist/** # 匹配 /blacklist/ 開頭的請求

        # 待辦事項服務路由
        - id: todo-service
          uri: lb://todo-service
          predicates:
            - Path=/todo/**

        # BizForm 服務路由
        - id: VitalBizFormService
          uri: lb://VitalBizFormService # 負載均衡到 `bizform-service`
          predicates:
            - Path=/bizform/** # 匹配 /bizform/ 開頭的請求

        # Genogram 服務路由 家系圖
        - id: GenogramService
          uri: lb://GenogramService # 負載均衡到 `genogram-service`
          predicates:
            - Path=/genogram/** # 匹配 /genogram/ 開頭的請求

  cache:
    caffeine:
      spec: initialCapacity=100,maximumSize=500,expireAfterWrite=10m # 緩存初始化容量為 100，最大容量為 500，寫入後 10 分鐘過期

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    urls:
      - name: GSS.Vital.AuthNService
        url: /authn/v3/authn-docs
      - name: GSS.Vital.AuthPService
        url: /authp/v3/authp-docs
#      - name: authz
#        url: /authz/v3/api-docs
#      - name: blacklist
#        url: /blacklist/v3/api-docs
#      - name: todo
#        url: /todo/v3/api-docs
      - name: GSS.Vital.BizFormAPIService
        url: /bizform/swagger/v1/swagger.json

auth:
  service:
    base-url: ${AUTH_SERVICE_BASE_URL:lb://authn-service} # 動態配置授權服務 URL

blacklist:
  service:
    # 黑名單服務的名稱
    # 這個名稱應與服務註冊中心（如 Eureka、Consul 或 Kubernetes）中定義的服務名稱一致
    name: blacklist-service

    # 黑名單檢查的 API 路徑
    # 該路徑會附加到黑名單服務的基礎 URL，例如：http://blacklist-service/blacklist/check
    check-path: /blacklist/check

    # 請求黑名單服務的超時時間（以秒為單位）
    # 當超過該時間沒有響應時，請求將被視為失敗
    timeout: 5

app:
  security:
    redirect-validation-paths:
      - "/authn/oauth" # OAuth 驗證的跳轉路徑
    allowed-redirect-uris:
      - "http://localhost:8080/authn/oauth/callback"           # DEV - 本地開發時 OAuth 授權回調端點（後端處理授權碼）
      - "https://cb-svc-api.vitalext.com/authn/oauth/callback" # STAGING / PROD - 上線環境後端處理 OAuth 授權碼的回調端點

    # ------------------------------------------------------------
    # permit-all : 進入 Gateway 時「免 Spring-Security 認證」，
    #              但依然會通過 InternalTokenFilter 驗證 JWT 與基本授權。
    #              ➜ 未攜帶有效 JWT 則返回 401。
    #              ➜ 適用於登入後可直接存取，但不需再進入 Spring Security 的路徑。
    # ------------------------------------------------------------
    permit-all:
      # 👉 提供使用者以系統 JWT 換取 BizForm 專用 JWT
      - /authn/oauth/token/exchange

      # 👉 處理使用者登出，清除黑名單、Cookie 與快取資訊
      - /authn/oauth/logout

      # 👉 權限授權服務，包含角色、資源權限驗證等查詢操作
      - /authz/**

      # 👉 權限與租戶設定服務（建立、更新、刪除等）
      - /authp/**

      # 👉 JWT 黑名單管理，支援黑名單查詢與快取同步
      - /blacklist/**

      # 👉 Todo 管理 API（範例服務）
      - /todo/**

      # 👉 BizForm 提報、同步等專用 API，需驗系統 JWT 與角色、地區權限
      - /bizform/**

      # 👉 家系圖服務，包含成員關係管理與查詢
      - /genogram/**

    # ------------------------------------------------------------
    # public-paths : 完全匿名路徑，Spring Security 與 InternalTokenFilter 均不處理。
    #                ➜ 無需攜帶 JWT，即可直接存取。
    #                ➜ 僅適用於「無登入需求」的靜態資源、健康檢查、公共元資料等。
    #                ⚠️ 若與安全相關，請勿放入此區。
    # ------------------------------------------------------------
    public-paths:
      # ---------- 🌐 靜態資源（前端預設請求） ----------
      - "/public/**"              # DEV - 開發時用的前端靜態資源（JS / CSS / img 等）
      - "/static/**"              # DEV - Spring Boot 傳統 static 目錄（若使用）
      - "/favicon.ico"            # ALL - 瀏覽器預設請求網站 icon

      # ---------- 🔍 健康檢查與監控 ----------
      - "/actuator/health"        # OPS - 系統健康狀態（供 LB / K8s 探活用）
      - "/actuator/prometheus"    # OPS - Prometheus 指標暴露端點（若有啟用監控）

      # ---------- 🔑 JWT / OIDC 公開協定端點 ----------
      - "/authn/.well-known/**"   # OIDC Discovery metadata
      - "/authn/jwks/publicKey"   # JWT 驗簽所需的 JWK 公鑰
      - "/authn/oauth/login"      # OAuth2 授權登入起點（供前端導向）
      - "/authn/oauth/callback"   # OAuth2 授權碼回調端點
      - "/oauth2/authorization/**" # Spring Security OAuth2 核心端點（自動註冊）

      # ---------- 📄 Swagger / OpenAPI 開發用文件 ----------
      - "/swagger-ui.html"        # Swagger UI 首頁（HTML）
      - "/swagger-ui/**"          # Swagger UI 前端靜態資源（JS / CSS）
      - "/v3/api-docs/**"         # OpenAPI 格式的後端文件 JSON
      - "/webjars/**"             # Swagger 相關依賴（JS / CSS 套件）
      - "/authn/v3/authn-docs"    # AuthN 聚合後的 Swagger 文件（通常是 aggregator 產出）

cors:
  allowed-origins:
    - "http://localhost:7001"                    # DEV - 前端本地開發環境（通常使用 Vite/React 本地啟動）
    - "https://cb-svc-web.vitalext.com"          # STAGING - VitalCaseBridge 前端測試環境（staging 測試使用）
    - "https://member.vikosmos.com"              # DEV - BizForm 測試環境（用於表單服務簽核測試）
    - "https://bizform.vitalyun.com"             # STAGING - BizForm 正式環境（實際對外簽核服務）
    - "https://cloud-member.gss.com.tw"          # DEV - 帳號中心測試環境（OAuth 登入與授權測試）
    - "https://member.gsscloud.com"              # STAGING - 帳號中心正式環境（實際登入與授權來源）
    - "https://demo.genogram.cloud"              # DEV - 家系圖嵌入 iframe 頁面來源（iframe 載入允許跨域）
  allowed-methods:
    - "GET"       # 查詢資源
    - "POST"      # 建立資源
    - "PUT"       # 更新整個資源
    - "DELETE"    # 刪除資源
    - "OPTIONS"   # 預檢請求（瀏覽器自動發出，用於 CORS 驗證）
    - "PATCH"     # 更新部分欄位（部分修改資源，RESTful 常見）

  allowed-headers:
    - "Authorization"       # JWT 或 OAuth Token 驗證用
    - "Content-Type"        # 請求格式聲明，例如 application/json
    - "Refresh-Token"       # Refresh Token，用於換發 access token
    - "X-Current-Page"      # 分頁：目前頁數（前端自定義 header）
    - "X-Page-Size"         # 分頁：每頁資料量
    - "X-Total-Count"       # 分頁：總筆數（多用於 response header，但保留允許請求端帶入）
    - "X-Requested-With"    # Ajax 請求識別（例如 XMLHttpRequest，某些 UI 框架會自帶）
    - "Accept"              # 接受的回應格式，例如 application/json、text/html 等